#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties
{
	mat4 viewInverse;
	mat4 projInverse;
	float time;
} cam;

struct RayPayload {
	bool isHit;
	bool continueTrace;
	vec3 color;
	vec3 rayDir;
	vec3 hitPos;
	vec3 hitNormal;
	vec3 throughput;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(location = 1) rayPayloadEXT bool shadowHitPayload;

void main()
{
	payload.isHit = false;
	payload.continueTrace = false;
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;
	d.y *= -1;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;

	float tmin = 0.001;
	float tmax = 10000.0;


	payload.color = vec3(0.0);
	payload.rayDir = direction.xyz;
	payload.throughput = vec3(1.0);

	traceRayEXT(
		topLevelAS,
		gl_RayFlagsOpaqueEXT,
		0xff,
		0, 0, 0,
		origin.xyz, tmin,
		direction.xyz, tmax,
		0
	);



	//
	if (!payload.isHit) {
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color, 0.0));
		return;
	}
	float angle = cam.time * 2.0 * 3.14159265359;
    vec3 sunDir = normalize(vec3(0.0, sin(angle), cos(angle)));

    shadowHitPayload = false;

    traceRayEXT(
        topLevelAS,
        gl_RayFlagsOpaqueEXT,
        0xFF,
        1,  
        0,
        1,
        payload.hitPos, 0.001,
        sunDir, 10000.0,
        1
    );

	if(payload.continueTrace) {
		payload.continueTrace = false;
		traceRayEXT(
			topLevelAS,
			gl_RayFlagsOpaqueEXT,
			0xff,
			0, 0, 0,
			payload.hitPos - payload.hitNormal * 0.002, 0.001,
			payload.rayDir, 10000.0,
			0
		);
		payload.color *= payload.throughput;
	}

    float sunlight = shadowHitPayload ? 0.0 : 1.0;

    float ndotl = dot(payload.hitNormal, sunDir);
	payload.color +=  sunlight * ndotl * payload.color + sunlight * payload.color * pow(clamp(dot(reflect(payload.rayDir, payload.hitNormal), sunDir), 0, 1), 30);
	//

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color, 0.0));
}
